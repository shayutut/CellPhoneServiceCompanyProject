//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.VisualStudio.ServiceReference.Platforms, version 15.0.27703.1
// 
namespace CRM.UI.CRMService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CRMService.ICRMService")]
    public interface ICRMService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICRMService/SendClient", ReplyAction="http://tempuri.org/ICRMService/SendClientResponse")]
        System.Threading.Tasks.Task SendClientAsync(CRM.CommonFiles.Models.Client client);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICRMService/SendLine", ReplyAction="http://tempuri.org/ICRMService/SendLineResponse")]
        System.Threading.Tasks.Task SendLineAsync(CRM.CommonFiles.Models.Line line);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICRMService/GetClientTypes", ReplyAction="http://tempuri.org/ICRMService/GetClientTypesResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<CRM.CommonFiles.Models.ClientType>> GetClientTypesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICRMService/SendCall", ReplyAction="http://tempuri.org/ICRMService/SendCallResponse")]
        System.Threading.Tasks.Task SendCallAsync(CRM.CommonFiles.Models.Call call);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICRMService/SendSMS", ReplyAction="http://tempuri.org/ICRMService/SendSMSResponse")]
        System.Threading.Tasks.Task SendSMSAsync(CRM.CommonFiles.Models.SMS sMS);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICRMService/SendPackageInclude", ReplyAction="http://tempuri.org/ICRMService/SendPackageIncludeResponse")]
        System.Threading.Tasks.Task SendPackageIncludeAsync(CRM.CommonFiles.Models.PackageInclude packageInclude);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICRMService/GetClients", ReplyAction="http://tempuri.org/ICRMService/GetClientsResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<CRM.CommonFiles.Models.Client>> GetClientsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICRMService/GetLines", ReplyAction="http://tempuri.org/ICRMService/GetLinesResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<CRM.CommonFiles.Models.Line>> GetLinesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICRMService/GetPackages", ReplyAction="http://tempuri.org/ICRMService/GetPackagesResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<CRM.CommonFiles.Models.Package>> GetPackagesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICRMService/GetLinesofClient", ReplyAction="http://tempuri.org/ICRMService/GetLinesofClientResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<CRM.CommonFiles.Models.Line>> GetLinesofClientAsync(CRM.CommonFiles.Models.Client client);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICRMService/GetLinesByClientId", ReplyAction="http://tempuri.org/ICRMService/GetLinesByClientIdResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<CRM.CommonFiles.Models.Line>> GetLinesByClientIdAsync(string Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICRMService/GetInvoce", ReplyAction="http://tempuri.org/ICRMService/GetInvoceResponse")]
        System.Threading.Tasks.Task<CRM.CommonFiles.Models.Package> GetInvoceAsync(CRM.CommonFiles.Models.Line line);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICRMService/GetCallsOfLine", ReplyAction="http://tempuri.org/ICRMService/GetCallsOfLineResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<CRM.CommonFiles.Models.Call>> GetCallsOfLineAsync(int lineId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICRMService/DeleteClient", ReplyAction="http://tempuri.org/ICRMService/DeleteClientResponse")]
        System.Threading.Tasks.Task<CRM.CommonFiles.Models.Client> DeleteClientAsync(CRM.CommonFiles.Models.Client client);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICRMService/DeleteLine", ReplyAction="http://tempuri.org/ICRMService/DeleteLineResponse")]
        System.Threading.Tasks.Task<CRM.CommonFiles.Models.Line> DeleteLineAsync(CRM.CommonFiles.Models.Line line);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICRMServiceChannel : CRM.UI.CRMService.ICRMService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CRMServiceClient : System.ServiceModel.ClientBase<CRM.UI.CRMService.ICRMService>, CRM.UI.CRMService.ICRMService {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public CRMServiceClient() : 
                base(CRMServiceClient.GetDefaultBinding(), CRMServiceClient.GetDefaultEndpointAddress()) {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_ICRMService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CRMServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(CRMServiceClient.GetBindingForEndpoint(endpointConfiguration), CRMServiceClient.GetEndpointAddress(endpointConfiguration)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CRMServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(CRMServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CRMServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(CRMServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CRMServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Threading.Tasks.Task SendClientAsync(CRM.CommonFiles.Models.Client client) {
            return base.Channel.SendClientAsync(client);
        }
        
        public System.Threading.Tasks.Task SendLineAsync(CRM.CommonFiles.Models.Line line) {
            return base.Channel.SendLineAsync(line);
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<CRM.CommonFiles.Models.ClientType>> GetClientTypesAsync() {
            return base.Channel.GetClientTypesAsync();
        }
        
        public System.Threading.Tasks.Task SendCallAsync(CRM.CommonFiles.Models.Call call) {
            return base.Channel.SendCallAsync(call);
        }
        
        public System.Threading.Tasks.Task SendSMSAsync(CRM.CommonFiles.Models.SMS sMS) {
            return base.Channel.SendSMSAsync(sMS);
        }
        
        public System.Threading.Tasks.Task SendPackageIncludeAsync(CRM.CommonFiles.Models.PackageInclude packageInclude) {
            return base.Channel.SendPackageIncludeAsync(packageInclude);
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<CRM.CommonFiles.Models.Client>> GetClientsAsync() {
            return base.Channel.GetClientsAsync();
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<CRM.CommonFiles.Models.Line>> GetLinesAsync() {
            return base.Channel.GetLinesAsync();
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<CRM.CommonFiles.Models.Package>> GetPackagesAsync() {
            return base.Channel.GetPackagesAsync();
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<CRM.CommonFiles.Models.Line>> GetLinesofClientAsync(CRM.CommonFiles.Models.Client client) {
            return base.Channel.GetLinesofClientAsync(client);
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<CRM.CommonFiles.Models.Line>> GetLinesByClientIdAsync(string Id) {
            return base.Channel.GetLinesByClientIdAsync(Id);
        }
        
        public System.Threading.Tasks.Task<CRM.CommonFiles.Models.Package> GetInvoceAsync(CRM.CommonFiles.Models.Line line) {
            return base.Channel.GetInvoceAsync(line);
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<CRM.CommonFiles.Models.Call>> GetCallsOfLineAsync(int lineId) {
            return base.Channel.GetCallsOfLineAsync(lineId);
        }
        
        public System.Threading.Tasks.Task<CRM.CommonFiles.Models.Client> DeleteClientAsync(CRM.CommonFiles.Models.Client client) {
            return base.Channel.DeleteClientAsync(client);
        }
        
        public System.Threading.Tasks.Task<CRM.CommonFiles.Models.Line> DeleteLineAsync(CRM.CommonFiles.Models.Line line) {
            return base.Channel.DeleteLineAsync(line);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_ICRMService)) {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_ICRMService)) {
                return new System.ServiceModel.EndpointAddress("http://localhost:8733/Design_Time_Addresses/CRM/CRMService/");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding() {
            return CRMServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_ICRMService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress() {
            return CRMServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_ICRMService);
        }
        
        public enum EndpointConfiguration {
            
            BasicHttpBinding_ICRMService,
        }
    }
}
